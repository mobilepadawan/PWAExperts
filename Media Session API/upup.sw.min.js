if ('serviceWorker' in navigator) {
  window.addEventListener("load", function() {
      navigator.serviceWorker.register("upup.sw.min.js").then(function(registration) {
          console.info("Se registró el Service Worker, bajo el Scope: ", registration.scope)
          console.log(registration)
      }, function(err) {
          console.error("Falló el registro del Service Worker", err)
      })
  })
}

//! UpUp Service Worker
//! version : 1.1.0
//! author  : Tal Ater @TalAter
//! license : MIT
//! https://github.com/TalAter/UpUp

// Name of our cache
var _CACHE_NAME_PREFIX = 'upup-cache';

// Receives an input and calculates a hash for it
var _calculateHash = function(input) {
  input = input.toString();
  var hash = 0, i, chr, len = input.length;
  if (len === 0) {
    return hash;
  }
  for (i = 0; i < len; i++) {
    chr = input.charCodeAt(i);
    hash = (hash << 5) - hash + chr;
    hash |= 0;
  }
  return hash;
};

// Register message event listener
self.addEventListener('message', function(event) {
  // place offline message in cache
  if (event.data.action === 'set-settings') {
    _parseSettingsAndCache(event.data.settings);
  }
});

// Register fetch event listener
self.addEventListener('fetch', function(event) {
  event.respondWith(
    // try to return untouched request from network first
    fetch(event.request).catch(async function() {
      // if it fails, try to return request from the cache
      const response = await caches.match(event.request);
      if (response) {
        return response;
      }
      // if not found in cache, return default offline content
      // (only if this is a navigation request. In older browsers we check if this is a text/html request. Thanks @jeffposnick)
      if (event.request.mode === 'navigate' || (event.request.method === 'GET' && event.request.headers.get('accept').includes('text/html'))) {
        return caches.match('sw-offline-content');
      }
    })
  );
});

var _parseSettingsAndCache = async function(settings) {
  var newCacheName =
    _CACHE_NAME_PREFIX + '-' +
    (settings['cache-version'] ? (settings['cache-version'] + '-') : '') +
    _calculateHash(settings['content'] + settings['content-url'] + settings['assets']);
  const cache = await caches.open(newCacheName);
  // Store our offline content in the cache
  if (settings['assets']) {
    cache.addAll(settings['assets'].map(function (urlToPrefetch) {
      return new Request(urlToPrefetch, { mode: 'no-cors' });
    }));
  }
  // store offline content from external url
  if (settings['content-url']) {
    return fetch(settings['content-url'], { mode: 'no-cors' }).then(function (response) {
      return cache.put('sw-offline-content', response);
    });
    // store plain content
  } else if (settings.content) {
    return cache.put('sw-offline-content', _buildResponse(settings.content));
    // store default content
  } else {
    return cache.put('sw-offline-content', _buildResponse("You are offline"));
  }
  const cacheNames = await caches.keys();
  return await Promise.all(
    cacheNames.map(function (cacheName_1) {
      if (cacheName_1.startsWith(_CACHE_NAME_PREFIX) && newCacheName !== cacheName_1) {
        return caches.delete(cacheName_1);
      }
    })
  );
};

var _buildResponse = function(content) {
  return new Response(content, {
    headers: { 'Content-Type': 'text/html' },
  });
};

  // const reg = await navigator.serviceWorker.getRegistration()
  // const pushSubscription = await reg.pushManager.subscribe({
  //   userVisibleOnly: true,
  //   applicationServerKey: pushSubscription.keys(0) // Llave pública encriptada bajo Base64
  // })

  //   console.log(pushSubscription.endpoint) // https://fcm.googleapis.com/fcm/send/:uniqueEndpointId/
  //   console.log(pushSubscription.keys) // { p256dh: '...', auth: '...' }

  // self.addEventListener('push', event => {
  //   const notificacionWeb = JSON.parse(event.data.text())
  //   self.registration.showNotification(
  //     notificacionWeb.title,
  //     {
  //       body: notificacionWeb.body, // Contenido de la notificación
  //       badge: './images/badge.png',  
  //       icon: './icons/icon.png', // ícono de la notificación
  //     },
  //   )
  // })

